export class SimplemdeConfig {
    constructor() {
        /**
         * 风格，默认：`antd`
         */
        this.style = 'antd';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3NyYy9jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGVBQWU7SUFBNUI7UUFDRTs7V0FFRztRQUNILFVBQUssR0FBd0IsTUFBTSxDQUFDO0lBU3RDLENBQUM7Q0FBQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBTaW1wbGVtZGVDb25maWcge1xyXG4gIC8qKlxyXG4gICAqIOmjjuagvO+8jOm7mOiupO+8mmBhbnRkYFxyXG4gICAqL1xyXG4gIHN0eWxlPzogJ2RlZmF1bHQnIHwgJ2FudGQnID0gJ2FudGQnO1xyXG4gIC8qKlxyXG4gICAqIOW7tui/n+WIneWni+WMllxyXG4gICAqL1xyXG4gIGRlbGF5PzogbnVtYmVyO1xyXG4gIC8qKlxyXG4gICAqIFtTaW1wbGVtZGUgY29uZmlndXJhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL3NwYXJrc3VpdGUvc2ltcGxlbWRlLW1hcmtkb3duLWVkaXRvciNjb25maWd1cmF0aW9uKVxyXG4gICAqL1xyXG4gIG9wdGlvbnM/OiBTaW1wbGVtZGVPcHRpb25zO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNpbXBsZW1kZU9wdGlvbnMge1xyXG4gIFtrZXk6IHN0cmluZ106IGFueTtcclxuXHJcbiAgLyoqXHJcbiAgICogU2F2ZXMgdGhlIHRleHQgdGhhdCdzIGJlaW5nIHdyaXR0ZW4gYW5kIHdpbGwgbG9hZCBpdCBiYWNrIGluIHRoZSBmdXR1cmUuIEl0IHdpbGwgZm9yZ2V0IHRoZSB0ZXh0IHdoZW4gdGhlIGZvcm0gaXQncyBjb250YWluZWQgaW4gaXMgc3VibWl0dGVkLlxyXG4gICAqXHJcbiAgICogLSAqKmVuYWJsZWQqKjogSWYgc2V0IHRvIGB0cnVlYCwgYXV0b3NhdmUgdGhlIHRleHQuIERlZmF1bHRzIHRvIGBmYWxzZWAuXHJcbiAgICogLSAqKmRlbGF5Kio6IERlbGF5IGJldHdlZW4gc2F2ZXMsIGluIG1pbGxpc2Vjb25kcy4gRGVmYXVsdHMgdG8gYDEwMDAwYCAoMTBzKS5cclxuICAgKiAtICoqdW5pcXVlSWQqKjogWW91IG11c3Qgc2V0IGEgdW5pcXVlIHN0cmluZyBpZGVudGlmaWVyIHNvIHRoYXQgU2ltcGxlTURFIGNhbiBhdXRvc2F2ZS4gU29tZXRoaW5nIHRoYXQgc2VwYXJhdGVzIHRoaXMgZnJvbSBvdGhlciBpbnN0YW5jZXMgb2YgU2ltcGxlTURFIGVsc2V3aGVyZSBvbiB5b3VyIHdlYnNpdGUuXHJcbiAgICovXHJcbiAgYXV0b3NhdmU/OiB7IGVuYWJsZWQ/OiBib29sZWFuOyB1bmlxdWVJZD86IHN0cmluZzsgZGVsYXk/OiBudW1iZXIgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3VzdG9taXplIGhvdyBjZXJ0YWluIGJ1dHRvbnMgdGhhdCBzdHlsZSBibG9ja3Mgb2YgdGV4dCBiZWhhdmUuXHJcbiAgICpcclxuICAgKiAtICoqYm9sZCoqIENhbiBiZSBzZXQgdG8gYCoqYCBvciBgX19gLiBEZWZhdWx0cyB0byBgKipgLlxyXG4gICAqIC0gKipjb2RlKiogQ2FuIGJlIHNldCB0byAgYGBgYCBgYGAgYGBgYCBvciBgfn5+YC4gIERlZmF1bHRzIHRvIGBgYGAgYGBgIGBgYGAuXHJcbiAgICogLSAqKml0YWxpYyoqIENhbiBiZSBzZXQgdG8gYCpgIG9yIGBfYC4gRGVmYXVsdHMgdG8gYCpgLlxyXG4gICAqL1xyXG4gIGJsb2NrU3R5bGVzPzogeyBib2xkPzogc3RyaW5nOyBjb2RlPzogc3RyaW5nOyBpdGFsaWM/OiBzdHJpbmcgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogSWYgc2V0IHRvIGB0cnVlYCwgZm9yY2UgdGV4dCBjaGFuZ2VzIG1hZGUgaW4gU2ltcGxlTURFIHRvIGJlIGltbWVkaWF0ZWx5IHN0b3JlZCBpbiBvcmlnaW5hbCB0ZXh0YXJlYS4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cclxuICAgKi9cclxuICBmb3JjZVN5bmM/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBBbiBhcnJheSBvZiBpY29uIG5hbWVzIHRvIGhpZGUuIENhbiBiZSB1c2VkIHRvIGhpZGUgc3BlY2lmaWMgaWNvbnMgc2hvd24gYnkgZGVmYXVsdCB3aXRob3V0IGNvbXBsZXRlbHkgY3VzdG9taXppbmcgdGhlIHRvb2xiYXIuXHJcbiAgICovXHJcbiAgaGlkZUljb25zPzogc3RyaW5nW107XHJcblxyXG4gIC8qKlxyXG4gICAqIElmIHNldCB0byBgZmFsc2VgLCBpbmRlbnQgdXNpbmcgc3BhY2VzIGluc3RlYWQgb2YgdGFicy4gRGVmYXVsdHMgdG8gYHRydWVgLlxyXG4gICAqL1xyXG4gIGluZGVudFdpdGhUYWJzPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3VzdG9taXplIGhvdyBjZXJ0YWluIGJ1dHRvbnMgdGhhdCBpbnNlcnQgdGV4dCBiZWhhdmUuIFRha2VzIGFuIGFycmF5IHdpdGggdHdvIGVsZW1lbnRzLiBUaGUgZmlyc3QgZWxlbWVudCB3aWxsIGJlIHRoZSB0ZXh0IGluc2VydGVkIGJlZm9yZSB0aGUgY3Vyc29yIG9yIGhpZ2hsaWdodCwgYW5kIHRoZSBzZWNvbmQgZWxlbWVudCB3aWxsIGJlIGluc2VydGVkIGFmdGVyLiBGb3IgZXhhbXBsZSwgdGhpcyBpcyB0aGUgZGVmYXVsdCBsaW5rIHZhbHVlOiBgW1wiW1wiLCBcIl0oaHR0cDovLylcIl1gLlxyXG4gICAqL1xyXG4gIGluc2VydFRleHRzPzoge1xyXG4gICAgaG9yaXpvbnRhbFJ1bGU/OiBzdHJpbmdbXTtcclxuICAgIGltYWdlPzogc3RyaW5nW107XHJcbiAgICBsaW5rPzogc3RyaW5nW107XHJcbiAgICB0YWJsZT86IHN0cmluZ1tdO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkanVzdCBzZXR0aW5ncyBmb3IgcGFyc2luZyB0aGUgTWFya2Rvd24gZHVyaW5nIGVkaXRpbmcgKG5vdCBwcmV2aWV3aW5nKS5cclxuICAgKiAtICoqYWxsb3dBdHhIZWFkZXJXaXRob3V0U3BhY2UqKjogSWYgc2V0IHRvIGB0cnVlYCwgd2lsbCByZW5kZXIgaGVhZGVycyB3aXRob3V0IGEgc3BhY2UgYWZ0ZXIgdGhlIGAjYC4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cclxuICAgKiAtICoqc3RyaWtldGhyb3VnaCoqOiBJZiBzZXQgdG8gYGZhbHNlYCwgd2lsbCBub3QgcHJvY2VzcyBHRk0gc3RyaWtldGhyb3VnaCBzeW50YXguIERlZmF1bHRzIHRvIGB0cnVlYC5cclxuICAgKiAtICoqdW5kZXJzY29yZXNCcmVha1dvcmRzKio6IElmIHNldCB0byBgdHJ1ZWAsIGxldCB1bmRlcnNjb3JlcyBiZSBhIGRlbGltaXRlciBmb3Igc2VwYXJhdGluZyB3b3Jkcy4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cclxuICAgKi9cclxuICBwYXJzaW5nQ29uZmlnPzoge1xyXG4gICAgYWxsb3dBdHhIZWFkZXJXaXRob3V0U3BhY2U/OiBib29sZWFuO1xyXG4gICAgc3RyaWtldGhyb3VnaD86IGJvb2xlYW47XHJcbiAgICB1bmRlcnNjb3Jlc0JyZWFrV29yZHM/OiBib29sZWFuO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEN1c3RvbSBwbGFjZWhvbGRlciB0aGF0IHNob3VsZCBiZSBkaXNwbGF5ZWRcclxuICAgKi9cclxuICBwbGFjZWhvbGRlcj86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQ3VzdG9tIGZ1bmN0aW9uIGZvciBwYXJzaW5nIHRoZSBwbGFpbnRleHQgTWFya2Rvd24gYW5kIHJldHVybmluZyBIVE1MLiBVc2VkIHdoZW4gdXNlciBwcmV2aWV3cy5cclxuICAgKi9cclxuICBwcmV2aWV3UmVuZGVyPzogKHBsYWluVGV4dDogc3RyaW5nLCBwcmV2aWV3PzogSFRNTEVsZW1lbnQpID0+IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogSWYgc2V0IHRvIGB0cnVlYCwgYSBKUyBhbGVydCB3aW5kb3cgYXBwZWFycyBhc2tpbmcgZm9yIHRoZSBsaW5rIG9yIGltYWdlIFVSTC4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cclxuICAgKi9cclxuICBwcm9tcHRVUkxzPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogQWRqdXN0IHNldHRpbmdzIGZvciBwYXJzaW5nIHRoZSBNYXJrZG93biBkdXJpbmcgcHJldmlld2luZyAobm90IGVkaXRpbmcpLlxyXG4gICAqIC0gKipzaW5nbGVMaW5lQnJlYWtzKio6IElmIHNldCB0byBgZmFsc2VgLCBkaXNhYmxlIHBhcnNpbmcgR0ZNIHNpbmdsZSBsaW5lIGJyZWFrcy4gRGVmYXVsdHMgdG8gYHRydWVgLlxyXG4gICAqIC0gKipjb2RlU3ludGF4SGlnaGxpZ2h0aW5nKio6IElmIHNldCB0byBgdHJ1ZWAsIHdpbGwgaGlnaGxpZ2h0IHVzaW5nIFtoaWdobGlnaHQuanNdKGh0dHBzOi8vZ2l0aHViLmNvbS9pc2FnYWxhZXYvaGlnaGxpZ2h0LmpzKS4gRGVmYXVsdHMgdG8gYGZhbHNlYC4gVG8gdXNlIHRoaXMgZmVhdHVyZSB5b3UgbXVzdCBpbmNsdWRlIGhpZ2hsaWdodC5qcyBvbiB5b3VyIHBhZ2UuIEZvciBleGFtcGxlLCBpbmNsdWRlIHRoZSBzY3JpcHQgYW5kIHRoZSBDU1MgZmlsZXMgbGlrZTo8YnI+YDxzY3JpcHQgc3JjPVwiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2hpZ2hsaWdodC5qcy9sYXRlc3QvaGlnaGxpZ2h0Lm1pbi5qc1wiPjwvc2NyaXB0PmA8YnI+YDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2hpZ2hsaWdodC5qcy9sYXRlc3Qvc3R5bGVzL2dpdGh1Yi5taW4uY3NzXCI+YFxyXG4gICAqL1xyXG4gIHJlbmRlcmluZ0NvbmZpZz86IHtcclxuICAgIHNpbmdsZUxpbmVCcmVha3M/OiBib29sZWFuO1xyXG4gICAgY29kZVN5bnRheEhpZ2hsaWdodGluZz86IGJvb2xlYW47XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogS2V5Ym9hcmQgc2hvcnRjdXRzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGluc3RhbmNlLiBEZWZhdWx0cyB0byB0aGUgW2FycmF5IG9mIHNob3J0Y3V0c10oaHR0cHM6Ly9naXRodWIuY29tL3NwYXJrc3VpdGUvc2ltcGxlbWRlLW1hcmtkb3duLWVkaXRvciNrZXlib2FyZC1zaG9ydGN1dHMpLlxyXG4gICAqL1xyXG4gIHNob3J0Y3V0cz86IHsgW2tleTogc3RyaW5nXTogYW55IH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEFuIGFycmF5IG9mIGljb24gbmFtZXMgdG8gc2hvdy4gQ2FuIGJlIHVzZWQgdG8gc2hvdyBzcGVjaWZpYyBpY29ucyBoaWRkZW4gYnkgZGVmYXVsdCB3aXRob3V0IGNvbXBsZXRlbHkgY3VzdG9taXppbmcgdGhlIHRvb2xiYXIuXHJcbiAgICovXHJcbiAgc2hvd0ljb25zPzogc3RyaW5nW107XHJcblxyXG4gIC8qKlxyXG4gICAqIElmIHNldCB0byBgZmFsc2VgLCBkaXNhYmxlIHRoZSBzcGVsbCBjaGVja2VyLiBEZWZhdWx0cyB0byBgdHJ1ZWAuXHJcbiAgICovXHJcbiAgc3BlbGxDaGVja2VyPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogSWYgc2V0IHRvIGBmYWxzZWAsIGhpZGUgdGhlIHN0YXR1cyBiYXIuIERlZmF1bHRzIHRvIHRoZSBhcnJheSBvZiBidWlsdC1pbiBzdGF0dXMgYmFyIGl0ZW1zLlxyXG4gICAqIC0gT3B0aW9uYWxseSwgeW91IGNhbiBzZXQgYW4gYXJyYXkgb2Ygc3RhdHVzIGJhciBpdGVtcyB0byBpbmNsdWRlLCBhbmQgaW4gd2hhdCBvcmRlci4gWW91IGNhbiBldmVuIGRlZmluZSB5b3VyIG93biBjdXN0b20gc3RhdHVzIGJhciBpdGVtcy5cclxuICAgKi9cclxuICBzdGF0dXM/OiBhbnk7XHJcblxyXG4gIC8qKlxyXG4gICAqIElmIHNldCB0byBgZmFsc2VgLCByZW1vdmUgdGhlIGBDb2RlTWlycm9yLXNlbGVjdGVkdGV4dGAgY2xhc3MgZnJvbSBzZWxlY3RlZCBsaW5lcy4gRGVmYXVsdHMgdG8gYHRydWVgLlxyXG4gICAqL1xyXG4gIHN0eWxlU2VsZWN0ZWRUZXh0PzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogSWYgc2V0LCBjdXN0b21pemUgdGhlIHRhYiBzaXplLiBEZWZhdWx0cyB0byBgMmAuXHJcbiAgICovXHJcbiAgdGFiU2l6ZT86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogSWYgc2V0IHRvIGBmYWxzZWAsIGhpZGUgdGhlIHRvb2xiYXIuIERlZmF1bHRzIHRvIHRoZSBbYXJyYXkgb2YgaWNvbnNdKCN0b29sYmFyLWljb25zKS5cclxuICAgKi9cclxuICB0b29sYmFyPzogYm9vbGVhbiB8IHN0cmluZ1tdIHwgbnVsbDtcclxuXHJcbiAgLyoqXHJcbiAgICogSWYgc2V0IHRvIGBmYWxzZWAsIGRpc2FibGUgdG9vbGJhciBidXR0b24gdGlwcy4gRGVmYXVsdHMgdG8gYHRydWVgLlxyXG4gICAqL1xyXG4gIHRvb2xiYXJUaXBzPzogYm9vbGVhbjtcclxufVxyXG4iXX0=